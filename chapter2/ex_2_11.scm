(define (positive? x) (>= x 0))
(define (negative? x) (< x 0))
(define (mul-interval x y)
  (let ((lx (lower-bound x))
        (ux (upper-bound x))
        (ly (lower-bound y))
        (uy (upper-bound y)))
    (cond ((and (positive? lx) (positive? ux) (positive? ly) (positive? uy))
          (make-interval (* lx ly) (* ux uy)))
          ((and (positive? lx) (positive? ux) (negative? ly) (positive? uy))
          (make-interval (* lx uy) (* ux uy)))
          ((and (positive? lx) (positive? ux) (negative? ly) (negative? uy))
          (make-interval (* lx uy) (* ux ly)))
          ((and (negative? lx) (positive? ux) (positive? ly) (positive? uy))
          (make-interval (* ux ly) (* ux uy)))
          ((and (negative? lx) (positive? ux) (negative? ly) (negative? uy))
          (make-interval (* lx uy) (* lx ly)))
          ((and (negative? lx) (negative? ux) (positive? ly) (positive? uy))
          (make-interval (* ux ly) (* lx uy)))
          ((and (negative? lx) (negative? ux) (negative? ly) (positive? uy))
          (make-interval (* ux ly) (* lx ly)))
          ((and (negative? lx) (negative? ux) (negative? ly) (negative? uy))
          (make-interval (* ux uy) (* lx ly)))
          (else (make-interval (min (* xu yl) (* xl yu))
                               (max (* xu lu) (* xl yl)))))))
